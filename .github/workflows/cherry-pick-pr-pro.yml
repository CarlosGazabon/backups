name: Cherrypicking and PR Creation
on:
  workflow_dispatch:
    inputs:
      commit_type:
        description: 'Tipo de commit a considerar'
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  build_and_tag:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    outputs:
      COMMIT_HASHES: ${{ steps.filter_commits.outputs.commit_hashes }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) || echo "0.0.0")
          echo "Latest tag: $latest_tag"
          echo "::set-output name=LATEST_TAG::$latest_tag"

      - name: Filter commits by commit type
        id: filter_commits
        run: |
            git log ${{ steps.get_tag.outputs.LATEST_TAG }}..HEAD --pretty=format:"%H %s" > commits.txt
            commit_type="${{ github.event.inputs.commit_type }}"
            echo "Filtering commits by type: $commit_type"
            
            # Filtra commits que contengan el tipo especificado dentro de corchetes
            grep -i "\[$commit_type\]" commits.txt > filtered_commits.txt
            
            if [[ ! -s filtered_commits.txt ]]; then
              echo "No commits found with the specified type."
              exit 1
            else
              echo "Commits matching '$commit_type':"
              cat filtered_commits.txt
        
              tac filtered_commits.txt > filtered_commits_reversed.txt
        
              commit_hashes=($(awk '{print $1}' filtered_commits_reversed.txt))
        
              for i in "${!commit_hashes[@]}"; do
                echo "commit_hash_$((i+1)): ${commit_hashes[$i]}"
              done
        
              echo "::set-output name=commit_hashes::${commit_hashes[*]}"
            fi
        

  create_pr:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    needs: build_and_tag
    runs-on: ubuntu-latest
    env:
      COMMIT_HASHES: ${{ needs.build_and_tag.outputs.commit_hashes }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Create a temporary branch and cherry-pick commits
        id: cherry_pick  
        run: |
              git config --global user.email "carlos.gazabon@ars-combinatoria.com"
              git config --global user.name "CarlosGazabon"
              git fetch --all
              git checkout main2
              random_numbers=$(shuf -i 10000-99999 -n 1)  # Genera 5 números aleatorios
              branch_name="temp-cherry-${random_numbers}"  # Usa los números random para el nombre de la rama
              git checkout -b "$branch_name"
              
              IFS=' ' read -r -a commit_hashes <<< "${{ env.COMMIT_HASHES }}"
              for commit in "${commit_hashes[@]}"; do
                commit=$(echo "$commit" | xargs)
                if [ -n "$commit" ] && git cat-file -e "$commit" 2>/dev/null; then
                  echo "Processing commit: $commit"
                  
                  # Verificar si el commit es de fusión
                  if git rev-parse "$commit^2" >/dev/null 2>&1; then
                    echo "Commit $commit is a merge commit."
                    git cherry-pick "$commit" -m 1 -X theirs || {
                      echo "Conflict detected during cherry-pick of merge commit $commit!"
                      git cherry-pick --abort
                      exit 1
                    }
                  else
                    git cherry-pick "$commit" -X theirs || {
                      echo "Conflict detected during cherry-pick!"
                      git cherry-pick --abort
                      exit 1
                    }
                  fi
        
                  # Verificar si hay cambios después del cherry-pick
                  if git diff --cached --quiet; then
                    echo "No changes after cherry-pick for commit $commit. Skipping commit."
                    git reset  # Elimina el cherry-pick en caso de que no haya cambios
                  fi
                else
                  echo "Commit '$commit' does not exist or is empty. Skipping."
                fi
              done
              git push origin "$branch_name"
              echo "::set-output name=branch_name::$branch_name"
        
  

      - name: Create Pull Request using GitHub API
        id: create_pr
        run: |
          pr_data='{
            "title": "Automated PR from '${{steps.cherry_pick.outputs.branch_name}}' to master",
            "head": "'${{steps.cherry_pick.outputs.branch_name}}'",
            "base": "main2",
            "body": "This PR includes commits cherry-picked from '${{steps.cherry_pick.outputs.branch_name}}'.",
            "draft": false
          }'
          response=$(curl -X POST \
            -H "Authorization: token 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" \
            -H "Content-Type: application/json" \
            -d "$pr_data" \
            https://api.github.com/repos/${{ github.repository }}/pulls)
          pr_number=$(echo "$response" | jq '.number')
          echo "::set-output name=pr_number::$pr_number"
